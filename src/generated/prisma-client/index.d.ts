// Code generated by Prisma (prisma@1.23.0-beta.9). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from 'graphql'
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib'
import { typeDefs } from './prisma-schema'

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U]

export interface Exists {
  post: (where?: PostWhereInput) => Promise<boolean>
  user: (where?: UserWhereInput) => Promise<boolean>
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>
}

export interface Prisma {
  $exists: Exists
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>

  /**
   * Queries
   */

  post: (where: PostWhereUniqueInput) => PostPromise
  posts: (args?: {
    where?: PostWhereInput
    orderBy?: PostOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<Post>
  postsConnection: (args?: {
    where?: PostWhereInput
    orderBy?: PostOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => PostConnectionPromise
  user: (where: UserWhereUniqueInput) => UserPromise
  users: (args?: {
    where?: UserWhereInput
    orderBy?: UserOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => FragmentableArray<User>
  usersConnection: (args?: {
    where?: UserWhereInput
    orderBy?: UserOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => UserConnectionPromise
  node: (args: { id: ID_Output }) => Node

  /**
   * Mutations
   */

  createPost: (data: PostCreateInput) => PostPromise
  updatePost: (args: {
    data: PostUpdateInput
    where: PostWhereUniqueInput
  }) => PostPromise
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput
    where?: PostWhereInput
  }) => BatchPayloadPromise
  upsertPost: (args: {
    where: PostWhereUniqueInput
    create: PostCreateInput
    update: PostUpdateInput
  }) => PostPromise
  deletePost: (where: PostWhereUniqueInput) => PostPromise
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise
  createUser: (data: UserCreateInput) => UserPromise
  updateUser: (args: {
    data: UserUpdateInput
    where: UserWhereUniqueInput
  }) => UserPromise
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }) => BatchPayloadPromise
  upsertUser: (args: {
    where: UserWhereUniqueInput
    create: UserCreateInput
    update: UserUpdateInput
  }) => UserPromise
  deleteUser: (where: UserWhereUniqueInput) => UserPromise
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise

  /**
   * Subscriptions
   */

  $subscribe: Subscription
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput,
  ) => CommentSubscriptionPayloadSubscription
  post: (
    where?: PostSubscriptionWhereInput,
  ) => PostSubscriptionPayloadSubscription
  user: (
    where?: UserSubscriptionWhereInput,
  ) => UserSubscriptionPayloadSubscription
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T
}

/**
 * Types
 */

export type PostOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'wasCreated_ASC'
  | 'wasCreated_DESC'
  | 'wasUpdated_ASC'
  | 'wasUpdated_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'published_ASC'
  | 'published_DESC'

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export interface PostCreateWithoutAuthorInput {
  title: String
  content?: String
  published?: Boolean
  comments?: CommentCreateManyInput
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input
}>

export interface PostCreateInput {
  title: String
  content?: String
  published?: Boolean
  author: UserCreateOneWithoutPostsInput
  comments?: CommentCreateManyInput
}

export interface CommentUpdateManyDataInput {
  text?: String
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput
  connect?: UserWhereUniqueInput
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput
  update?: UserUpdateWithoutPostsDataInput
  upsert?: UserUpsertWithoutPostsInput
  connect?: UserWhereUniqueInput
}

export interface UserCreateWithoutPostsInput {
  email: String
  name?: String
}

export interface CommentWhereInput {
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
  AND?: CommentWhereInput[] | CommentWhereInput
  OR?: CommentWhereInput[] | CommentWhereInput
  NOT?: CommentWhereInput[] | CommentWhereInput
}

export interface CommentCreateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PostWhereInput
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
}

export interface CommentCreateInput {
  text: String
  writtenBy: UserCreateOneInput
}

export interface UserUpdateManyMutationInput {
  email?: String
  name?: String
}

export interface UserCreateOneInput {
  create?: UserCreateInput
  connect?: UserWhereUniqueInput
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput
  data: PostUpdateManyDataInput
}

export interface UserCreateInput {
  email: String
  name?: String
  posts?: PostCreateManyWithoutAuthorInput
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input
  email?: String
}>

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutAuthorDataInput
  create: PostCreateWithoutAuthorInput
}

export interface UserUpdateInput {
  email?: String
  name?: String
  posts?: PostUpdateManyWithoutAuthorInput
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutAuthorDataInput
}

export interface PostUpdateInput {
  title?: String
  content?: String
  published?: Boolean
  author?: UserUpdateOneRequiredWithoutPostsInput
  comments?: CommentUpdateManyInput
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
}

export interface PostUpdateManyMutationInput {
  title?: String
  content?: String
  published?: Boolean
}

export interface PostUpdateManyDataInput {
  title?: String
  content?: String
  published?: Boolean
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String
  name?: String
}

export interface UserWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  NOT?: UserWhereInput[] | UserWhereInput
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput
  data: CommentUpdateManyDataInput
}

export interface CommentScalarWhereInput {
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput
}

export interface CommentUpdateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput
  create: UserCreateWithoutPostsInput
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: String
  content?: String
  published?: Boolean
  comments?: CommentUpdateManyInput
}

export interface PostScalarWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  wasCreated?: DateTimeInput
  wasCreated_not?: DateTimeInput
  wasCreated_in?: DateTimeInput[] | DateTimeInput
  wasCreated_not_in?: DateTimeInput[] | DateTimeInput
  wasCreated_lt?: DateTimeInput
  wasCreated_lte?: DateTimeInput
  wasCreated_gt?: DateTimeInput
  wasCreated_gte?: DateTimeInput
  wasUpdated?: DateTimeInput
  wasUpdated_not?: DateTimeInput
  wasUpdated_in?: DateTimeInput[] | DateTimeInput
  wasUpdated_not_in?: DateTimeInput[] | DateTimeInput
  wasUpdated_lt?: DateTimeInput
  wasUpdated_lte?: DateTimeInput
  wasUpdated_gt?: DateTimeInput
  wasUpdated_gte?: DateTimeInput
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  content?: String
  content_not?: String
  content_in?: String[] | String
  content_not_in?: String[] | String
  content_lt?: String
  content_lte?: String
  content_gt?: String
  content_gte?: String
  content_contains?: String
  content_not_contains?: String
  content_starts_with?: String
  content_not_starts_with?: String
  content_ends_with?: String
  content_not_ends_with?: String
  published?: Boolean
  published_not?: Boolean
  AND?: PostScalarWhereInput[] | PostScalarWhereInput
  OR?: PostScalarWhereInput[] | PostScalarWhereInput
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: CommentWhereInput
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput
}

export interface PostWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  wasCreated?: DateTimeInput
  wasCreated_not?: DateTimeInput
  wasCreated_in?: DateTimeInput[] | DateTimeInput
  wasCreated_not_in?: DateTimeInput[] | DateTimeInput
  wasCreated_lt?: DateTimeInput
  wasCreated_lte?: DateTimeInput
  wasCreated_gt?: DateTimeInput
  wasCreated_gte?: DateTimeInput
  wasUpdated?: DateTimeInput
  wasUpdated_not?: DateTimeInput
  wasUpdated_in?: DateTimeInput[] | DateTimeInput
  wasUpdated_not_in?: DateTimeInput[] | DateTimeInput
  wasUpdated_lt?: DateTimeInput
  wasUpdated_lte?: DateTimeInput
  wasUpdated_gt?: DateTimeInput
  wasUpdated_gte?: DateTimeInput
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  content?: String
  content_not?: String
  content_in?: String[] | String
  content_not_in?: String[] | String
  content_lt?: String
  content_lte?: String
  content_gt?: String
  content_gte?: String
  content_contains?: String
  content_not_contains?: String
  content_starts_with?: String
  content_not_starts_with?: String
  content_ends_with?: String
  content_not_ends_with?: String
  published?: Boolean
  published_not?: Boolean
  comments_every?: CommentWhereInput
  comments_some?: CommentWhereInput
  comments_none?: CommentWhereInput
  AND?: PostWhereInput[] | PostWhereInput
  OR?: PostWhereInput[] | PostWhereInput
  NOT?: PostWhereInput[] | PostWhereInput
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput
}

export interface NodeNode {
  id: ID_Output
}

export interface UserPreviousValues {
  id: ID_Output
  email: String
  name?: String
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  email: () => Promise<String>
  name: () => Promise<String>
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  email: () => Promise<AsyncIterator<String>>
  name: () => Promise<AsyncIterator<String>>
}

export interface PostConnection {
  pageInfo: PageInfo
  edges: PostEdge[]
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<PostEdge>>() => T
  aggregate: <T = AggregatePostPromise>() => T
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T
  aggregate: <T = AggregatePostSubscription>() => T
}

export interface User {
  id: ID_Output
  email: String
  name?: String
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>
  email: () => Promise<String>
  name: () => Promise<String>
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput
    orderBy?: PostOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  email: () => Promise<AsyncIterator<String>>
  name: () => Promise<AsyncIterator<String>>
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput
    orderBy?: PostOrderByInput
    skip?: Int
    after?: String
    before?: String
    first?: Int
    last?: Int
  }) => T
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>
  hasPreviousPage: () => Promise<Boolean>
  startCursor: () => Promise<String>
  endCursor: () => Promise<String>
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>
  startCursor: () => Promise<AsyncIterator<String>>
  endCursor: () => Promise<AsyncIterator<String>>
}

export interface PostSubscriptionPayload {
  mutation: MutationType
  node: Post
  updatedFields: String[]
  previousValues: PostPreviousValues
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = PostPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = PostPreviousValuesPromise>() => T
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = PostSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = PostPreviousValuesSubscription>() => T
}

export interface BatchPayload {
  count: Long
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>
}

export interface Comment {
  text: String
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  text: () => Promise<String>
  writtenBy: <T = UserPromise>() => T
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  text: () => Promise<AsyncIterator<String>>
  writtenBy: <T = UserSubscription>() => T
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T
  cursor: () => Promise<String>
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface CommentPreviousValues {
  text: String
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  text: () => Promise<String>
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  text: () => Promise<AsyncIterator<String>>
}

export interface CommentSubscriptionPayload {
  mutation: MutationType
  node: Comment
  updatedFields: String[]
  previousValues: CommentPreviousValues
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = CommentPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = CommentPreviousValuesPromise>() => T
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = CommentSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = CommentPreviousValuesSubscription>() => T
}

export interface Post {
  id: ID_Output
  wasCreated: DateTimeOutput
  wasUpdated: DateTimeOutput
  title: String
  content?: String
  published: Boolean
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>
  wasCreated: () => Promise<DateTimeOutput>
  wasUpdated: () => Promise<DateTimeOutput>
  title: () => Promise<String>
  content: () => Promise<String>
  published: () => Promise<Boolean>
  author: <T = UserPromise>() => T
  comments: <T = FragmentableArray<Comment>>() => T
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  wasCreated: () => Promise<AsyncIterator<DateTimeOutput>>
  wasUpdated: () => Promise<AsyncIterator<DateTimeOutput>>
  title: () => Promise<AsyncIterator<String>>
  content: () => Promise<AsyncIterator<String>>
  published: () => Promise<AsyncIterator<Boolean>>
  author: <T = UserSubscription>() => T
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>() => T
}

export interface PostPreviousValues {
  id: ID_Output
  wasCreated: DateTimeOutput
  wasUpdated: DateTimeOutput
  title: String
  content?: String
  published: Boolean
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>
  wasCreated: () => Promise<DateTimeOutput>
  wasUpdated: () => Promise<DateTimeOutput>
  title: () => Promise<String>
  content: () => Promise<String>
  published: () => Promise<Boolean>
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  wasCreated: () => Promise<AsyncIterator<DateTimeOutput>>
  wasUpdated: () => Promise<AsyncIterator<DateTimeOutput>>
  title: () => Promise<AsyncIterator<String>>
  content: () => Promise<AsyncIterator<String>>
  published: () => Promise<AsyncIterator<Boolean>>
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T
  edges: <T = FragmentableArray<UserEdge>>() => T
  aggregate: <T = AggregateUserPromise>() => T
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T
  aggregate: <T = AggregateUserSubscription>() => T
}

export interface AggregateUser {
  count: Int
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface PostEdge {
  node: Post
  cursor: String
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T
  cursor: () => Promise<String>
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface AggregatePost {
  count: Int
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node: User
  updatedFields: String[]
  previousValues: UserPreviousValues
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = UserPromise>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = UserPreviousValuesPromise>() => T
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = UserSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = UserPreviousValuesSubscription>() => T
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export type Long = string

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'Comment',
    embedded: false,
  },
  {
    name: 'Post',
    embedded: false,
  },
  {
    name: 'User',
    embedded: false,
  },
]

/**
 * Type Defs
 */

export const prisma: Prisma
